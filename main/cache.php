<?php
/*
#	File:  		/main/cache.php
#	Author: 	Caleb Brumfield
#	License:	GNU GPLv3
#	Source:		https://github.com/Cheshire121/StrongWeb-CMS
*
#	Description:
|		This file contains the Cache library. 
|	 The library itself is used to save PHP-Usable data to the disk,
*	
#	Intensions:
|		To provide a means of reducing overall system load
|	 by providing a secondary means of data storage that uses less
| 	 system resources to store and fetch that data.
*
#	Public Member List:
|	 Cache()					- Constructor, takes no arguments, checks for outdated cache data on start.
|	 setCache($dataName, $data) - Method used to save '$data' to the cache. $dataName is used to name the cachefile.  
|								- - Returns false on failure and true when cache is saved.
|								
|	 getCache($dataName)		- Method used to fetch saved data from a previously saved cache file, specified by a string, $dataName.  
|								- - Returns the data previously saved.
|								
|	 checkCache($dataName) 		- Method used to check if cached data exists under the name specified by a string, $dataName.  
|								- - Returns true if cache data is found, false otherwise.
|
|	 unsetCacheFile($dataName)	- Removes the data cached under the name specified by the string in $dataName.
|								- - Returns true if data/file was removed, false otherwise.
|
|	 clearCache()				- Removes all cached data from the system.
|
|	 clearCacheRange($range)    - Removes all cached data containing the string specified by $range.  
|								- - Useful when caching data in multiple files with similar names.
|
|	 getCacheTime($dataName)	- Method used to determine when cache data was safed. 
|								- - Returns a unix timestamp generated by filetime(), otherwise 0.
*/

if( !defined('IN_SWCMS') )
{	exit(); }


class Cache
{
	private $cachedir	= 'temp/';
	private $cachetime	= 21600; //six hours in seconds.
	private $cacheext	= '.chp';
	private $cache_on	= true;
	public  $file_prep	= 'cache_';
	
	private $config		= NULL;
	
	public function __contruct()
	{
		$this->Cache(); 
	}
	
	public function Cache()
	{
		$this->checkCacheEnabled();
		
		$this->cachedir =  ROOT_PATH.'/temp/';
		
		if ($h = opendir($this->cachedir))
		{
			while (($file = readdir($h)) !== false)
			{
				if(preg_match('#'.$this->file_prep.'.*?#is', $file))
				{
					$file = str_replace(array($this->file_prep, $this->cacheext), array('',''), $file);
					if($this->checkCache($file) == false)
					{	$this->__unsetCacheFile($file); }
				}
			}
			closedir($h);
		}
	}
	
	public function setCache($dataName, $data, $encode=false)
	{
		if( $this->cache_on == false )
		{	return false; }
		
		if($this->checkCache($dataName) == false)
		{
			$file = $this->__cache2fs($dataName);
			$data = $this->__makeCacheData($data, $encode);
			
			if(@file_put_contents($file, $data))
			{	return true; }
			else
			{	return false; }
		}
		else
		{	return false; }
	}
	
	public function getCache($dataName)
	{
		if( $this->cache_on == false )
		{	return false; }
		
		$file = $this->__cache2fs($dataName);
		
		if(@file_exists($file))
		{
			$data = file_get_contents($file);
			if($this->__checkEncoded($data))
			{	return $this->__parseEncoded($data, $dataName); }
			else
			{	return include($file); }
		}
	}
	
	public function checkCache($dataName)
	{	
		if( $this->cache_on == false )
		{	return false; }
		
		$file = $this->__cache2fs($dataName);
		if(@file_exists($file))
		{
			$cachefile_created = @filemtime($file);
			$ctime = (time() - $this->cachetime);
			
			if($ctime < $cachefile_created) 
			{	return true; }
			else
			{	return false; }
		}
		else
		{	return false; }
	}
	
	public function unsetCacheFile($dataName)
	{
		return $this->__unsetCacheFile($dataName);
	}
	
	public function clearCache()
	{
		if ($h = opendir($this->cachedir))
		{
			while (($file = readdir($h)) !== false)
			{
				if(preg_match('#'.$this->file_prep.'.*?#is', $file))
				{
					$file = str_replace(array($this->file_prep, $this->cacheext), array('',''), $file);
					$this->__unsetCacheFile($file);
				}
			}
			closedir($h);
		}
	}
	
	public function clearCacheRange($range)
	{
		if ($h = opendir($this->cachedir))
		{
			while (($file = readdir($h)) !== false)
			{
				if(preg_match('#'.$this->file_prep.$range.'.*?#is', $file))
				{
					$file = str_replace(array($this->file_prep, $this->cacheext), array('',''), $file);
					$this->__unsetCacheFile($file);
				}
			}
			closedir($h);
		}
	}
	
	public function getCacheTime($dataName)
	{
		if( $this->cache_on == false )
		{	return false; }
		
		$file = $this->__cache2fs($dataName);
		if(@file_exists($file))
		{	$ctime = @filemtime($file); }
		else
		{	$ctime = 0; }

		return $ctime;
	}
	
	private function __checkEncoded($data)
	{
		if(preg_match('#^ENC64:#is', $data))
		{	return true; }
		else
		{	return false; }
	}
	
	private function __makeEncoded($data)
	{
		return 'ENC64:'.base64_encode($data);
	}
	
	private function __parseEncoded($data, $dataName)
	{
		$data = base64_decode(str_replace('ENC64:', '', $data));
		$data = str_replace('<?php return', '', $data);
	
		eval("\$array_data = {$data};");
		
		if(is_array($array_data))
		{	return $array_data; }
		else
		{
			$this->__unsetCacheFile($dataName);
			
			$uri = str_replace('//', '/', '/'.$_SERVER['REQUEST_URI']);
			header('Location: '.SITE_URL.$uri);
		}
	}
	
	private function __makeCacheData($data, $encoded, $htmlencode=false, $nested=false)
	{
		if($nested == true)
		{	$file_data=''; }
		else
		{	$file_data='<?php return '; }
		
		if(is_array($data))
		{
			$file_data.=' array(  ';
			foreach($data as $key => $val)
			{
				$file_data .= '"'.$key.'"=>';
				if(is_array($val))
				{
					$file_data .= $this->__makeCacheData($val, $encoded, $htmlencode, true);
				}
				elseif(preg_match('/(^-?\d\d*\.\d*$)|(^-?\d\d*$)|(^-?\.\d\d*$)/D', $val))
				{
					if($htmlencode == true)
					{
						$val = htmlspecialchars($val, ENT_QUOTES);
					}
			
					$file_data .= $val.',';
				}
				else
				{
					if($htmlencode == true)
					{
						$val = htmlspecialchars($val, ENT_QUOTES);
					}
					
					$val = str_replace("'","\'", $val);
					$file_data.= "'{$val}',";
				}
			}
			if($nested == true)
			{	$file_data = substr($file_data, 0, -1).'),'; }
			else
			{	$file_data = substr($file_data, 0, -1).');'; }
		}
		else
		{
			if($htmlencode == true)
			{
				$data = htmlspecialchars($data, ENT_QUOTES);
			}
			
			if(preg_match('/(^-?\d\d*\.\d*$)|(^-?\d\d*$)|(^-?\.\d\d*$)/D', $data))
			{	$file_data.= $data.';'; }
			else
			{
				$data = str_replace('\'', '\\\'', $data);
				$file_data.= "'{$data}';";
			}
		}
		
		if($encoded == true && $nested == false)
		{	return $this->__makeEncoded($file_data); }
		else
		{	return $file_data; }
	}
	
	private function __unsetCacheFile($dataName)
	{
		$file = $this->__cache2fs($dataName);
		if(@file_exists($file))
		{
			if(@unlink($file))
			{	return true; }
			else
			{	return false; }	
		}
		else
		{	return false; }
	}
	
	private function __cache2fs($dataName)
	{
		$path = $this->cachedir  . $this->file_prep . $dataName . $this->cacheext;
		return $path;
	}
	
	private function checkCacheEnabled()
	{
		global $db;
		if( SOFTWARE_INSTALLED == TRUE )
		{
			$rs = $db->Execute( "SELECT cfg_value FROM config WHERE cfg_for='system' AND cfg_name='cache_on'" );
			
			if( $rs->RecordCount() > 0)
			{
				$this->cache_on = ($rs->fields[ 'cfg_value' ] == true) ? true : false;
			}
		}
		else
		{	$this->cache_on = false; }
	}
	
}

?>